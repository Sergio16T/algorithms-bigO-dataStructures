"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3536],{6066:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var a=s(4848),t=s(8453);const r={sidebar_position:3},i="Hash Map",c={id:"techniques/hash-map",title:"Hash Map",description:"Map Like Data Structures are versatile data structures that store key-value pairs and provide efficient operations for insertion, deletion, and lookup.",source:"@site/docs/techniques/hash-map.md",sourceDirName:"techniques",slug:"/techniques/hash-map",permalink:"/algorithms-bigO-dataStructures/docs/techniques/hash-map",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"studyGuide",previous:{title:"Two Pointer",permalink:"/algorithms-bigO-dataStructures/docs/techniques/two-pointer"},next:{title:"Fast and Slow Pointers",permalink:"/algorithms-bigO-dataStructures/docs/techniques/fast-and-slow-pointers"}},o={},l=[{value:"1. Counting Frequencies",id:"1-counting-frequencies",level:2},{value:"2. Two Sum",id:"2-two-sum",level:2},{value:"3. Finding Duplicates",id:"3-finding-duplicates",level:2},{value:"4. Is Anagram",id:"4-is-anagram",level:2},{value:"5. Group Anagrams",id:"5-group-anagrams",level:2},{value:"6. Finding Intersection",id:"6-finding-intersection",level:2},{value:"7. Word Pattern Matching",id:"7-word-pattern-matching",level:2}];function m(n){const e={annotation:"annotation",code:"code",h1:"h1",h2:"h2",header:"header",math:"math",mi:"mi",mo:"mo",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",...(0,t.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"hash-map",children:"Hash Map"})}),"\n",(0,a.jsx)(e.p,{children:"Map Like Data Structures are versatile data structures that store key-value pairs and provide efficient operations for insertion, deletion, and lookup."}),"\n",(0,a.jsxs)(e.p,{children:["Utilizing Map like Data Structures enable's complex operations to be optimized often resulting in ",(0,a.jsxs)(e.span,{className:"katex",children:[(0,a.jsx)(e.span,{className:"katex-mathml",children:(0,a.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(e.semantics,{children:[(0,a.jsxs)(e.mrow,{children:[(0,a.jsx)(e.mi,{children:"O"}),(0,a.jsx)(e.mo,{stretchy:"false",children:"("}),(0,a.jsx)(e.mi,{children:"n"}),(0,a.jsx)(e.mo,{stretchy:"false",children:")"})]}),(0,a.jsx)(e.annotation,{encoding:"application/x-tex",children:"O(n)"})]})})}),(0,a.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(e.span,{className:"base",children:[(0,a.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,a.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,a.jsx)(e.span,{className:"mopen",children:"("}),(0,a.jsx)(e.span,{className:"mord mathnormal",children:"n"}),(0,a.jsx)(e.span,{className:"mclose",children:")"})]})})]})," linear time complexity."]}),"\n",(0,a.jsx)(e.p,{children:"Some common usecases"}),"\n",(0,a.jsx)(e.h2,{id:"1-counting-frequencies",children:"1. Counting Frequencies"}),"\n",(0,a.jsx)(e.p,{children:"It's common to intialize a frequencyMap and iterate through the elements in an initial pass of the\nstr/array to count frequencies to be used later."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-JavaScript",children:"function countFrequencies(str) {\n  const frequencyMap = new Map();\n\n  for (const char of str) {\n    frequencyMap.set(char, (frequencyMap.get(char) || 0) + 1);\n  }\n\n  return frequencyMap;\n}\n"})}),"\n",(0,a.jsx)(e.h2,{id:"2-two-sum",children:"2. Two Sum"}),"\n",(0,a.jsxs)(e.p,{children:["A classic problem, where using a Map can be used to achieve ",(0,a.jsxs)(e.span,{className:"katex",children:[(0,a.jsx)(e.span,{className:"katex-mathml",children:(0,a.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(e.semantics,{children:[(0,a.jsxs)(e.mrow,{children:[(0,a.jsx)(e.mi,{children:"O"}),(0,a.jsx)(e.mo,{stretchy:"false",children:"("}),(0,a.jsx)(e.mi,{children:"n"}),(0,a.jsx)(e.mo,{stretchy:"false",children:")"})]}),(0,a.jsx)(e.annotation,{encoding:"application/x-tex",children:"O(n)"})]})})}),(0,a.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(e.span,{className:"base",children:[(0,a.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,a.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,a.jsx)(e.span,{className:"mopen",children:"("}),(0,a.jsx)(e.span,{className:"mord mathnormal",children:"n"}),(0,a.jsx)(e.span,{className:"mclose",children:")"})]})})]})," run time."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-JavaScript",children:"const twoSum = (nums, target) => {\n  const hashmap = {};\n\n  for (let i = 0; i < nums.length; i++) {\n    // e.g. target is 5. current value is 8. 5 - 8 = -3\n    const match = target - nums[i];\n    if (match in hashmap) {\n      return new Array(i, hashmap[match])\n    }\n    hashmap[nums[i]] = i; // since we store the index after the check we can be assured it won't be the same as i\n  }\n}\n"})}),"\n",(0,a.jsx)(e.h2,{id:"3-finding-duplicates",children:"3. Finding Duplicates"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-JavaScript",children:"function findDuplicates(nums) {\n  const numMap = new Map();\n  const duplicates = [];\n\n  for (const num of nums) {\n    if (numMap.has(num)) {\n      duplicates.push(num);\n    } else {\n      numMap.set(num, true);\n    }\n  }\n\n  return duplicates;\n}\n"})}),"\n",(0,a.jsx)(e.h2,{id:"4-is-anagram",children:"4. Is Anagram"}),"\n",(0,a.jsx)(e.p,{children:"A common problem is determing if strings are anagrams."}),"\n",(0,a.jsxs)(e.p,{children:["One strategy is to compare both strings sorted to determine if they are anagrams resulting in ",(0,a.jsxs)(e.span,{className:"katex",children:[(0,a.jsx)(e.span,{className:"katex-mathml",children:(0,a.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(e.semantics,{children:[(0,a.jsxs)(e.mrow,{children:[(0,a.jsx)(e.mi,{children:"O"}),(0,a.jsx)(e.mo,{stretchy:"false",children:"("}),(0,a.jsx)(e.mi,{children:"n"}),(0,a.jsx)(e.mi,{children:"log"}),(0,a.jsx)(e.mo,{children:"\u2061"}),(0,a.jsx)(e.mrow,{}),(0,a.jsx)(e.mi,{children:"n"}),(0,a.jsx)(e.mo,{stretchy:"false",children:")"})]}),(0,a.jsx)(e.annotation,{encoding:"application/x-tex",children:"{O}(n\\log{}n)"})]})})}),(0,a.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(e.span,{className:"base",children:[(0,a.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,a.jsx)(e.span,{className:"mord",children:(0,a.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"})}),(0,a.jsx)(e.span,{className:"mopen",children:"("}),(0,a.jsx)(e.span,{className:"mord mathnormal",children:"n"}),(0,a.jsx)(e.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,a.jsxs)(e.span,{className:"mop",children:["lo",(0,a.jsx)(e.span,{style:{marginRight:"0.01389em"},children:"g"})]}),(0,a.jsx)(e.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,a.jsx)(e.span,{className:"mord"}),(0,a.jsx)(e.span,{className:"mord mathnormal",children:"n"}),(0,a.jsx)(e.span,{className:"mclose",children:")"})]})})]})," time. However this runtime can be improved with a Hashmap to ",(0,a.jsxs)(e.span,{className:"katex",children:[(0,a.jsx)(e.span,{className:"katex-mathml",children:(0,a.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(e.semantics,{children:[(0,a.jsxs)(e.mrow,{children:[(0,a.jsx)(e.mi,{children:"O"}),(0,a.jsx)(e.mo,{stretchy:"false",children:"("}),(0,a.jsx)(e.mi,{children:"n"}),(0,a.jsx)(e.mo,{stretchy:"false",children:")"})]}),(0,a.jsx)(e.annotation,{encoding:"application/x-tex",children:"O(n)"})]})})}),(0,a.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(e.span,{className:"base",children:[(0,a.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,a.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,a.jsx)(e.span,{className:"mopen",children:"("}),(0,a.jsx)(e.span,{className:"mord mathnormal",children:"n"}),(0,a.jsx)(e.span,{className:"mclose",children:")"})]})})]})," run time."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-JavaScript",children:"function isAnagram(str1, str2) {\n  if (str1.length !== str2.length) return false;\n\n  const frequencyMap = new Map();\n\n  for (const char of str1) {\n    frequencyMap.set(char, (frequencyMap.get(char) || 0) + 1);\n  }\n\n  for (const char of str2) {\n    if (!frequencyMap.has(char) || frequencyMap.get(char) === 0) {\n      return false;\n    }\n    frequencyMap.set(char, frequencyMap.get(char) - 1);\n  }\n\n  return true;\n}\n"})}),"\n",(0,a.jsx)(e.h2,{id:"5-group-anagrams",children:"5. Group Anagrams"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-JavaScript",children:"function groupAnagrams(words) {\n  const anagramMap = new Map();\n\n  for (const word of words) {\n    const sortedWord = word.split('').sort().join('');\n    if (!anagramMap.has(sortedWord)) {\n      anagramMap.set(sortedWord, []);\n    }\n    anagramMap.get(sortedWord).push(word);\n  }\n\n  return Array.from(anagramMap.values());\n}\n"})}),"\n",(0,a.jsx)(e.h2,{id:"6-finding-intersection",children:"6. Finding Intersection"}),"\n",(0,a.jsx)(e.p,{children:"Find the intersection of two arrays, which are the elements common to both arrays."}),"\n",(0,a.jsx)(e.p,{children:"Strategy: use map to count frequencies of elements in one Array\nuse frequency map for fast look up and updates to frequency count as\nwe push common elements to intersection array"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-JavaScript",children:"function intersect(nums1, nums2) {\n  const map = new Map();\n  const intersection = [];\n\n  for (const num of nums1) {\n    map.set(num, (map.get(num) || 0) + 1);\n  }\n\n  for (const num of nums2) {\n    if (map.has(num) && map.get(num) > 0) {\n      intersection.push(num);\n      map.set(num, map.get(num) - 1);\n    }\n  }\n\n  return intersection;\n}\n"})}),"\n",(0,a.jsx)(e.h2,{id:"7-word-pattern-matching",children:"7. Word Pattern Matching"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-JavaScript",children:"function wordPattern(pattern, str) {\n  const words = str.split(' ');\n  if (pattern.length !== words.length) { return false; }\n\n  const patternMap = new Map();\n  const wordMap = new Map();\n\n  for (let i = 0; i < pattern.length; i++) {\n    const char = pattern[i];\n    const word = words[i];\n\n    if (patternMap.has(char) && patternMap.get(char) !== word) {\n      return false;\n    }\n    if (wordMap.has(word) && wordMap.get(word) !== char) {\n      return false;\n    }\n\n    patternMap.set(char, word);\n    wordMap.set(word, char);\n  }\n\n  return true;\n}\n"})})]})}function h(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(m,{...n})}):m(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>i,x:()=>c});var a=s(6540);const t={},r=a.createContext(t);function i(n){const e=a.useContext(r);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:i(n.components),a.createElement(r.Provider,{value:e},n.children)}}}]);